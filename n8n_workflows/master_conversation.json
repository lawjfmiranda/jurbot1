{
  "name": "ü§ñ MASTER BOT - Conversa Completa JM ADVOGADOS",
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "master_bot",
        "responseMode": "responseNode",
        "options": {}
      },
      "id": "webhook-master",
      "name": "üì± Webhook Master",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [240, 400]
    },
    {
      "parameters": {
        "jsCode": "// üß† PROCESSADOR MESTRE - Toda a intelig√™ncia aqui!\nconst inputData = $input.all()[0].json;\n\nconst userNumber = inputData.user_number;\nconst message = inputData.message;\nconst currentState = inputData.current_state || 'FREE';\nconst stateData = inputData.state_data || {};\n\nconsole.log('ü§ñ MASTER BOT processando:', userNumber, message.substring(0, 50));\n\n// ========================\n// üéØ CLASSIFICA√á√ÉO INTELIGENTE\n// ========================\n\nfunction classifyIntent(msg) {\n  const msgLower = msg.toLowerCase();\n  \n  // üö® CRIMINAL - M√°xima prioridade\n  const criminalKeywords = [\n    'preso', 'flagrante', 'cust√≥dia', 'delegacia', 'inqu√©rito',\n    'crime', 'processo criminal', 'recurso', 'apela√ß√£o', 'condenado'\n  ];\n  \n  // üéì FIES - Especialidade\n  const fiesKeywords = [\n    'fies', 'financiamento', 'faculdade', 'bloqueado', 'suspenso'\n  ];\n  \n  // üè† FAM√çLIA\n  const familiaKeywords = [\n    'div√≥rcio', 'separa√ß√£o', 'guarda', 'pens√£o', 'viol√™ncia'\n  ];\n  \n  // üí• ACIDENTES\n  const acidenteKeywords = [\n    'acidente', 'bateu', 'colis√£o', 'seguro', 'indeniza√ß√£o'\n  ];\n  \n  // üìÖ AGENDAMENTO\n  const agendamentoKeywords = [\n    'agendar', 'marcar', 'consulta', 'hor√°rio', 'dispon√≠vel'\n  ];\n  \n  // üìã LISTAR AGENDAMENTOS\n  const listarKeywords = [\n    'quando', 'meu agendamento', 'minha consulta', 'marcado'\n  ];\n  \n  // ‚ùå CANCELAR\n  const cancelarKeywords = [\n    'cancelar', 'desmarcar', 'remarcar'\n  ];\n  \n  // Classifica√ß√£o por prioridade\n  if (criminalKeywords.some(k => msgLower.includes(k))) return 'criminal';\n  if (fiesKeywords.some(k => msgLower.includes(k))) return 'fies';\n  if (familiaKeywords.some(k => msgLower.includes(k))) return 'familia';\n  if (acidenteKeywords.some(k => msgLower.includes(k))) return 'acidente';\n  if (agendamentoKeywords.some(k => msgLower.includes(k))) return 'schedule';\n  if (listarKeywords.some(k => msgLower.includes(k))) return 'list_meetings';\n  if (cancelarKeywords.some(k => msgLower.includes(k))) return 'cancel';\n  \n  // Sauda√ß√µes\n  if (msgLower.match(/^(oi|ol√°|bom dia|boa tarde|boa noite)$/)) return 'greeting';\n  \n  return 'legal'; // D√∫vida jur√≠dica geral\n}\n\n// ========================\n// üîÑ GERENCIAMENTO DE ESTADO\n// ========================\n\nfunction processState(intent, currentState, message, stateData) {\n  // Se est√° em processo de agendamento, continuar\n  if (['SCHED_NAME', 'SCHED_PERIOD', 'SCHED_DATE', 'SCHED_SLOT'].includes(currentState)) {\n    return {\n      action: 'continue_schedule',\n      nextState: getNextScheduleState(currentState),\n      data: stateData\n    };\n  }\n  \n  // Novo processo baseado na inten√ß√£o\n  switch(intent) {\n    case 'schedule':\n      return {\n        action: 'start_schedule',\n        nextState: 'SCHED_NAME',\n        data: {}\n      };\n      \n    case 'criminal':\n    case 'fies':\n    case 'familia':\n    case 'acidente':\n      return {\n        action: 'qualify_case',\n        nextState: 'QUALIFYING',\n        data: { area: intent }\n      };\n      \n    case 'list_meetings':\n      return {\n        action: 'list_meetings',\n        nextState: 'FREE',\n        data: {}\n      };\n      \n    case 'cancel':\n      return {\n        action: 'start_cancel',\n        nextState: 'CANCEL_SELECT',\n        data: {}\n      };\n      \n    default:\n      return {\n        action: 'general_response',\n        nextState: 'FREE',\n        data: {}\n      };\n  }\n}\n\nfunction getNextScheduleState(current) {\n  const flow = {\n    'SCHED_NAME': 'SCHED_PERIOD',\n    'SCHED_PERIOD': 'SCHED_DATE',\n    'SCHED_DATE': 'SCHED_SLOT',\n    'SCHED_SLOT': 'SCHED_CONFIRM'\n  };\n  return flow[current] || 'FREE';\n}\n\n// ========================\n// üéØ PROCESSAMENTO PRINCIPAL\n// ========================\n\nconst intent = classifyIntent(message);\nconst stateResult = processState(intent, currentState, message, stateData);\n\n// Detectar urg√™ncia\nconst urgentKeywords = ['preso', 'flagrante', 'viol√™ncia', 'amea√ßa', 'urgente'];\nconst isUrgent = urgentKeywords.some(k => message.toLowerCase().includes(k));\n\n// Resultado final\nconst result = {\n  user_number: userNumber,\n  message: message,\n  intent: intent,\n  current_state: currentState,\n  next_state: stateResult.nextState,\n  action: stateResult.action,\n  state_data: stateResult.data,\n  is_urgent: isUrgent,\n  priority: isUrgent ? 'high' : 'normal',\n  timestamp: new Date().toISOString(),\n  needs_human_contact: isUrgent,\n  \n  // Dados para pr√≥ximos n√≥s\n  route_to: stateResult.action,\n  area: stateResult.data.area || 'geral'\n};\n\nconsole.log('üß† Processamento completo:', result);\n\nreturn result;"
      },
      "id": "master-processor",
      "name": "üß† Processador Master",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [440, 400]
    },
    {
      "parameters": {
        "conditions": {
          "string": [
            {
              "value1": "={{ $json.route_to }}",
              "operation": "equal",
              "value2": "qualify_case"
            }
          ]
        }
      },
      "id": "route-qualify",
      "name": "üéØ Rota Qualifica√ß√£o",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [640, 300]
    },
    {
      "parameters": {
        "conditions": {
          "string": [
            {
              "value1": "={{ $json.route_to }}",
              "operation": "equal",
              "value2": "start_schedule"
            }
          ]
        }
      },
      "id": "route-schedule",
      "name": "üìÖ Rota Agendamento",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [640, 500]
    },
    {
      "parameters": {
        "url": "={{ $json.area === 'criminal' ? 'https://n8n-n8n.c9ewnj.easypanel.host/webhook/qualificacao_criminal' : $json.area === 'fies' ? 'https://n8n-n8n.c9ewnj.easypanel.host/webhook/qualificacao_fies' : $json.area === 'familia' ? 'https://n8n-n8n.c9ewnj.easypanel.host/webhook/qualificacao_familia' : 'https://n8n-n8n.c9ewnj.easypanel.host/webhook/qualificacao_acidente' }}",
        "method": "POST",
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "user_number",
              "value": "={{ $json.user_number }}"
            },
            {
              "name": "message",
              "value": "={{ $json.message }}"
            },
            {
              "name": "case_type",
              "value": "={{ $json.area }}"
            },
            {
              "name": "timestamp",
              "value": "={{ $json.timestamp }}"
            }
          ]
        }
      },
      "id": "call-qualification",
      "name": "üî• Chamar Qualifica√ß√£o Espec√≠fica",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4,
      "position": [840, 200]
    },
    {
      "parameters": {
        "jsCode": "// üìÖ SISTEMA DE AGENDAMENTO COMPLETO\nconst inputData = $input.all()[0].json;\n\nconst userNumber = inputData.user_number;\nconst message = inputData.message;\nconst currentState = inputData.current_state;\nconst stateData = inputData.state_data || {};\n\nconsole.log('üìÖ Processando agendamento:', currentState);\n\nlet response = '';\nlet nextState = 'FREE';\nlet newData = { ...stateData };\nlet needsGoogleCalendar = false;\n\nswitch(currentState) {\n  case 'SCHED_NAME':\n    // Primeira etapa: capturar nome\n    newData.client_name = message;\n    nextState = 'SCHED_PERIOD';\n    response = `Ol√° ${message}! üëã\\n\\nPara agendar sua consulta, preciso saber:\\n\\nüìÖ Voc√™ prefere:\\n\\n1Ô∏è‚É£ Manh√£ (8h √†s 12h)\\n2Ô∏è‚É£ Tarde (13h √†s 17h)\\n\\nDigite 1 ou 2:`;\n    break;\n    \n  case 'SCHED_PERIOD':\n    // Segunda etapa: per√≠odo\n    const period = message === '1' ? 'manha' : message === '2' ? 'tarde' : null;\n    if (!period) {\n      response = '‚ùå Por favor, digite 1 para manh√£ ou 2 para tarde:';\n      nextState = 'SCHED_PERIOD';\n    } else {\n      newData.period = period;\n      nextState = 'SCHED_DATE';\n      response = `‚úÖ ${period === 'manha' ? 'Manh√£' : 'Tarde'} selecionado!\\n\\nüìÖ Agora me diga a data desejada:\\n\\nExemplo: 25/01/2024\\n\\nOu digite:\\n‚Ä¢ HOJE\\n‚Ä¢ AMANH√É`;\n    }\n    break;\n    \n  case 'SCHED_DATE':\n    // Terceira etapa: data\n    let selectedDate = '';\n    if (message.toLowerCase() === 'hoje') {\n      selectedDate = new Date().toISOString().split('T')[0];\n    } else if (message.toLowerCase() === 'amanh√£') {\n      const tomorrow = new Date();\n      tomorrow.setDate(tomorrow.getDate() + 1);\n      selectedDate = tomorrow.toISOString().split('T')[0];\n    } else {\n      // Tentar parsear data DD/MM/YYYY\n      const dateMatch = message.match(/(\\d{1,2})\\/(\\d{1,2})\\/(\\d{4})/);\n      if (dateMatch) {\n        const [, day, month, year] = dateMatch;\n        selectedDate = `${year}-${month.padStart(2, '0')}-${day.padStart(2, '0')}`;\n      }\n    }\n    \n    if (!selectedDate) {\n      response = '‚ùå Data inv√°lida. Use o formato DD/MM/AAAA ou digite HOJE/AMANH√É:';\n      nextState = 'SCHED_DATE';\n    } else {\n      newData.date = selectedDate;\n      nextState = 'SCHED_SLOT';\n      needsGoogleCalendar = true; // Vamos buscar hor√°rios dispon√≠veis\n      response = `üìÖ Data ${selectedDate} selecionada!\\n\\n‚è∞ Buscando hor√°rios dispon√≠veis...`;\n    }\n    break;\n    \n  case 'SCHED_SLOT':\n    // Quarta etapa: hor√°rio espec√≠fico\n    newData.time_slot = message;\n    nextState = 'SCHED_CONFIRM';\n    response = `‚úÖ RESUMO DO AGENDAMENTO:\\n\\nüë§ Nome: ${newData.client_name}\\nüìÖ Data: ${newData.date}\\n‚è∞ Hor√°rio: ${message}\\n\\n‚úÖ Confirmar agendamento?\\n\\nDigite SIM para confirmar ou N√ÉO para cancelar.`;\n    break;\n    \n  case 'SCHED_CONFIRM':\n    if (message.toLowerCase() === 'sim') {\n      nextState = 'FREE';\n      needsGoogleCalendar = true; // Criar evento no Google Calendar\n      response = `üéâ AGENDAMENTO CONFIRMADO!\\n\\n‚úÖ Sua consulta est√° marcada:\\nüìÖ ${newData.date}\\n‚è∞ ${newData.time_slot}\\n\\nüìß Voc√™ receber√° um email de confirma√ß√£o em breve.\\n\\nüí¨ Precisa de mais alguma coisa?`;\n    } else {\n      nextState = 'FREE';\n      response = `‚ùå Agendamento cancelado.\\n\\nüí¨ Posso te ajudar com mais alguma coisa?`;\n    }\n    break;\n    \n  default:\n    response = `üìÖ Vamos agendar sua consulta!\\n\\nüë§ Por favor, me diga seu nome completo:`;\n    nextState = 'SCHED_NAME';\n}\n\n// Resultado\nconst result = {\n  user_number: userNumber,\n  current_state: currentState,\n  next_state: nextState,\n  state_data: newData,\n  response: response,\n  needs_google_calendar: needsGoogleCalendar,\n  calendar_action: currentState === 'SCHED_DATE' ? 'check_availability' : currentState === 'SCHED_CONFIRM' && message.toLowerCase() === 'sim' ? 'create_event' : null,\n  processed_at: new Date().toISOString()\n};\n\nconsole.log('üìÖ Agendamento processado:', result);\n\nreturn result;"
      },
      "id": "schedule-processor",
      "name": "üìÖ Processador Agendamento",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [840, 400]
    },
    {
      "parameters": {
        "conditions": {
          "boolean": [
            {
              "value1": "={{ $json.needs_google_calendar }}",
              "value2": true
            }
          ]
        }
      },
      "id": "check-calendar-need",
      "name": "üìÖ Precisa Google Calendar?",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [1040, 400]
    },
    {
      "parameters": {
        "authentication": "serviceAccount",
        "resource": "calendar",
        "operation": "getAll",
        "calendarId": "primary",
        "start": "={{ $json.state_data.date }}T00:00:00.000Z",
        "end": "={{ $json.state_data.date }}T23:59:59.000Z"
      },
      "id": "google-calendar",
      "name": "üìÖ Google Calendar",
      "type": "n8n-nodes-base.googleCalendar",
      "typeVersion": 1,
      "position": [1240, 300]
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "INSERT OR REPLACE INTO clients (whatsapp_number, name, state, state_data, last_message, updated_at) VALUES (?, ?, ?, ?, ?, ?)",
        "parameters": {
          "parameters": [
            {
              "name": "whatsapp_number",
              "value": "={{ $json.user_number }}"
            },
            {
              "name": "name",
              "value": "={{ $json.state_data.client_name || 'Cliente' }}"
            },
            {
              "name": "state",
              "value": "={{ $json.next_state }}"
            },
            {
              "name": "state_data",
              "value": "={{ JSON.stringify($json.state_data) }}"
            },
            {
              "name": "last_message",
              "value": "={{ $json.message }}"
            },
            {
              "name": "updated_at",
              "value": "={{ new Date().toISOString() }}"
            }
          ]
        }
      },
      "id": "save-database",
      "name": "üíæ Salvar no Banco",
      "type": "n8n-nodes-base.sqlite",
      "typeVersion": 1,
      "position": [1040, 600]
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={{ { \"reply\": $json.response, \"next_state\": $json.next_state, \"state_data\": $json.state_data } }}"
      },
      "id": "final-response",
      "name": "üì± Resposta Final",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [1440, 400]
    }
  ],
  "connections": {
    "üì± Webhook Master": {
      "main": [
        [
          {
            "node": "üß† Processador Master",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "üß† Processador Master": {
      "main": [
        [
          {
            "node": "üéØ Rota Qualifica√ß√£o",
            "type": "main",
            "index": 0
          },
          {
            "node": "üìÖ Rota Agendamento",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "üéØ Rota Qualifica√ß√£o": {
      "main": [
        [
          {
            "node": "üî• Chamar Qualifica√ß√£o Espec√≠fica",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "üíæ Salvar no Banco",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "üìÖ Rota Agendamento": {
      "main": [
        [
          {
            "node": "üìÖ Processador Agendamento",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "üíæ Salvar no Banco",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "üìÖ Processador Agendamento": {
      "main": [
        [
          {
            "node": "üìÖ Precisa Google Calendar?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "üìÖ Precisa Google Calendar?": {
      "main": [
        [
          {
            "node": "üìÖ Google Calendar",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "üíæ Salvar no Banco",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "üìÖ Google Calendar": {
      "main": [
        [
          {
            "node": "üíæ Salvar no Banco",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "üíæ Salvar no Banco": {
      "main": [
        [
          {
            "node": "üì± Resposta Final",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "üî• Chamar Qualifica√ß√£o Espec√≠fica": {
      "main": [
        [
          {
            "node": "üíæ Salvar no Banco",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": true,
  "settings": {},
  "versionId": "1"
}
